# -*- coding: utf-8 -*-
"""Test Final Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujiMAmbUPKoDVJaq4vjP7H-vYo14evET
"""

#Final Project CS230
# """"
# Name : Alejandro Urruela
# CS230 : Section - 2
# Data : Fast food (https://www.kaggle.com/datasets/thedevastator/fast-food-restaurants-in-the-united-states)
#URL :  (Streamlit cloud link: )

#Description:

# The goal of this program is to analyze, visualize, and interact with the restaurant dataset to extract meaningful insights about fast food in the USA.
# The program provides answers to key questions and enables users to interactively explore the data through maps, charts, and filters.
# Some of the main goals of the program are Identify popular chains, Analyze restaurants by location, Visualize restaurant distribution, and include
# categories-specific insights.

#code:

#We start by importing the libraries that we will use
!pip install streamlit
!pip install pydeck
!pip install pandas

import pandas as pd
import streamlit as st
import pydeck as pdk

#use error handling to load dataset
@st.cache_data       #Describe AI in document
def load_data(filepath):
    try:
        df = pd.read_excel(filepath)
        return df
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return None

#Devlop functions for filtering location data and ranking popularity

#Filter data by state and select city as optional

def filter_data_by_location(data, province=None, city=None):
    filtered_data = data[data['province'] == province] if province else data
    if city:
        filtered_data = filtered_data[filtered_data['city'] == city]
    return filtered_data

#Calculate popularity for certain categories
def calculate_popularity(data, categories_filter):
  categories_data = data[data['categories'].str.contains(categories_filter, case=False, na=False)]   #Describe "case" AI
  return categories_data['name'].value_counts()

#load used dataset
data_path = 'fast_food_usa.xlsx'
df = load_data(data_path)

#Add a title and description to our output
st.title("Fast Food Insights in the USA")
st.markdown("This interactive app provides insights into fast food restaurants across the USA, including their distribution, popularity, and nutritional trends.")

#[PY1]
#Function that returns top states for categories (2 parameters)
def top_states_by_categories(data, categories="Ice Cream", top_n=10):
  categories_data = data[data['categories'].str.contains(categories, case=False, na=False)] #AI description
  state_counts = categories_data['province'].value_counts().head(top_n)       #AI description
  return state_counts


#[ST1]
#filter options on sidebar
st.sidebar.header("Filter Options")
states = df['province'].unique()
selected_state = st.sidebar.selectbox("Select State", options=states) #AI description

#[ST2]
cities = df[df['province'] == selected_state]['city'].unique()
selected_city = st.sidebar.selectbox("Select city", options=cities)

#Visuals
st.header("Visualizations") #sets header

#[ST3]
#[VIZ1]
#1. Popular chains in dataset
st.subheader("1. Most Popular Fast Food Chains")
popular_chains = df['name'].value_counts().head(10)
st.bar_chart(popular_chains)

#[VIZ2]
#2. Top restaurants in selected location / error handling
st.subheader("2. Top Restaurants in Selected Location")
filtered_data = filter_data_by_location(df, selected_state, selected_city)
if not filtered_data.empty:
    top_restaurants = filtered_data['name'].value_counts().head(5)
    st.write(f"Top Restaurants in {selected_city}, {selected_state}:")
    st.bar_chart(top_restaurants)
else:
    st.warning("No data available for the selected location.")

#[MAP]
#3. Map of Fast food locations (latitude and longitud)
st.subheader("3. Map of Restaurant Locations")
st.map(df[['latitude', 'longitude']])

#[VIZ3]
#4. Locations with the most Ice Cream Shops
st.subheader("4. States with the Most Ice Cream Shops")
ice_cream_states = top_states_by_categories(df, "Ice Cream Shop and Fast Food Restaurant")
st.bar_chart(ice_cream_states)

#Data analytics section
st.header("Data Analytics")

#[DA1]
#Data cleaning
df['categories'] = df['categories'].apply(lambda x: x.strip() if isinstance(x, str) else x)

#[DA2]
#Sort ascending
sorted_data = df.sort_values(by='name', ascending=True)

#[DA3]
#Identidy top values for visuals
top_states = df['province'].value_counts().head(10)
st.write("Top 10 States by Number of Restaurants:")
st.table(top_states)

#[DA4]
#Filter data with condition
hot_dog_data = df[df['categories'].str.contains("Hot Dog", case=False, na=False)]

#[DA5]
#Filter with 2 conditions
ice_cream_and_state = df[(df['categories'].str.contains("Ice Cream Shop and Fast Food Restaurant", case=False, na=False)) & (df['province'] == selected_state)]

#[DA6]
#Pivot table and analysis         #AI description
pivot_table = df.pivot_table(index='province', columns='categories', aggfunc='size', fill_value=0)
st.write("Pivot Table Analysis:")
st.dataframe(pivot_table)

#[PY2]
#Function that includes multiple values
#Compares the count of 2 categories
def compare_categories(data, categories1, categories2):
    count1 = data[data['categories'].str.contains(categories1, case=False, na=False)].shape[0]
    count2 = data[data['categories'].str.contains(categories2, case=False, na=False)].shape[0]
    return count1, count2

hot_dog_count, fried_chicken_count = compare_categories(df, "Hot Dog", "Fried Chicken")
st.write(f"Hot Dogs: {hot_dog_count}, Fried Chicken: {fried_chicken_count}")

#[PY4]
#List comprehension
categories = [x for x in df['categories'].unique() if isinstance(x, str)]
st.sidebar.write("Unique Categories:")
st.sidebar.write(categories)
#[PY3]
try:
    if 'latitude' not in df.columns or 'longitude' not in df.columns:
        raise ValueError("latitude and longitude columns are missing.")
except ValueError as e:
    st.error(f"Data error: {e}")
